name: Raptor Package Repo CICD

env:
  PROJECT_NAME: test_gh_pages # set this to your project name
  PYTHON_VERSION: 3.11 # set this to the Python version to use
  PACKAGE_NAME: test_gh_pages # set this to the name of Github environment
  AZURE_CLI_VERSION: 2.64.0 # set this to your Azure CLI version
  AML_ENVIRONMENT: test_gh_pages # set this to the name of AML environment to create
  RG_NAME: default_resource_group # set this to your Azure resource group name
  WS_NAME: default_workspace # set this to your Azure ML workspace name

on:
  push:
    branches:
      - develop
      - main
      - release/*

  pull_request:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Needed for publication on PyPI
permissions:
  contents: read # Permissions to read the repository code
  id-token: write # IMPORTANT: this permission is mandatory for trusted publishing
  pages: write

jobs:
  Precommit:
    name: Perform pre-commit checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies with poetry
        run: |
          python -m pip install --upgrade pip
          python -m pip install poetry
          echo "Mocking submodules"
          ls -1 lib | xargs -i poetry init -C ./lib/{} --name {} -n
          ls -1 lib | xargs -I {} sh -c 'echo "" > ./lib/{}/README.md'
          ls -1 lib | xargs -I {} sh -c 'mkdir ./lib/{}/{}'
          ls -1 lib | xargs -I {} sh -c 'echo "" > ./lib/{}/{}/__init__.py'
          echo "Installing dev dependencies"
          poetry install --only precommit
          echo "Installing poetry"
          poetry run pip install poetry
      
      - name: Run pre-commit
        run: poetry run pre-commit run --all-files --show-diff-on-failure

  UnitTest:
    name: Unit Tests Coverage
    # needs: []  # Runs in parallel with Precommit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies with poetry
        run: |
          python -m pip install --upgrade pip
          python -m pip install poetry
          echo "Mocking submodules"
          ls -1 lib | xargs -i poetry init -C ./lib/{} --name {} -n
          ls -1 lib | xargs -I {} sh -c 'echo "" > ./lib/{}/README.md'
          ls -1 lib | xargs -I {} sh -c 'mkdir ./lib/{}/{}'
          ls -1 lib | xargs -I {} sh -c 'echo "" > ./lib/{}/{}/__init__.py'
          echo "Installing dev dependencies"
          poetry install --only dev,test
          echo "Installing poetry"
          poetry run pip install poetry

      - name: Unit tests
        run: poetry run pytest --cov-report term-missing --cov=src/test_gh_pages tests/ -m "not onlylocal" 

      - name: Upload test results
        # Use always() to always run this step to publish test results when there are test failures
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pytest-results
          path: coverage.xml

        # https://josh-ops.com/posts/github-code-coverage/
      - name: Code Coverage Summary Report
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: 'coverage.xml'
          badge: true
          format: 'markdown'
          output: 'both'
    
      - name: Add Coverage PR Comment
        uses: marocchino/sticky-pull-request-comment@v2
        if: github.event_name == 'pull_request'
        with:
          recreate: true
          path: code-coverage-results.md
  
      - name: Write to Job Summary
        run: cat code-coverage-results.md >> $GITHUB_STEP_SUMMARY

  Documentation:    
    runs-on: ubuntu-latest
    if: success() && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies with poetry
        run: |
          python -m pip install --upgrade pip
          python -m pip install poetry
          echo "Mocking submodules"
          ls -1 lib | xargs -i poetry init -C ./lib/{} --name {} -n
          ls -1 lib | xargs -I {} sh -c 'echo "" > ./lib/{}/README.md'
          ls -1 lib | xargs -I {} sh -c 'mkdir ./lib/{}/{}'
          ls -1 lib | xargs -I {} sh -c 'echo "" > ./lib/{}/{}/__init__.py'
          echo "Installing dev dependencies"
          poetry install --only docs
          echo "Installing poetry"
          poetry run pip install poetry

      - name: Build documentation modules
        run: poetry run sphinx-apidoc -o docs/source src --tocfile module

      - name: Build documentation
        run: |
          cd docs
          poetry run make clean
          poetry run make html

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './docs/build/html'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

 Build:
    # https://johnfraney.ca/blog/how-to-publish-a-python-package-with-poetry-and-github-actions/
    name: Build and publish to PyPI
    runs-on: ubuntu-latest
    needs: [Precommit, UnitTest]

    if: success() && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        run: curl -sSL https://install.python-poetry.org | python - -y
  
      - name: Update PATH
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH
  
      - name: Update Poetry configuration
        run: poetry config virtualenvs.create false

      - name: Install dependencies
        run: poetry install --sync --no-interaction

      - name: Package project
        run: poetry build

      - name: Publish to GitHub Packages
        run: poetry publish -r github
