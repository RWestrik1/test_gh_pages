[project]
name = "test_gh_pages"
description = "A test for github pages workflow"
version = "0.0.1"
readme = "README.md"
authors = [{name = "Roel Westrik", email = "162354@rotterdam.nl"}]
requires-python = ">=3.11,<4.0"
dependencies = [
    "poetry-plugin-export (>=1.6.0,<2.0.0)",
    "python-dotenv (>=0.21.1,<0.22.0)",
    "azure-monitor-opentelemetry (>=1.6.4,<2.0.0)"
]

[tool.poetry]
packages = [{ include = "test_gh_pages", from = "src" }]

[tool.poetry.group.dev.dependencies]
ipykernel = "6.21.0"
pylint = "2.13.8"
pyyaml = "^6.0"
pydocstyle = "^6.3.0"
tomli = "^2.0.1"

[tool.poetry.group.precommit.dependencies]
pre-commit = "3.4.0"

[tool.poetry.group.test.dependencies]
codecov = "^2.1.13"
mock = "^5.1.0"
pyodbc = "^5.1.0"
pytest = "7.1.2"
pytest-cov = "^4.0.0"
pytest-azurepipelines = "^1.0.4"

[tool.poetry.group.build]
optional = true

[tool.poetry.group.build.dependencies]
tomlq = "^0.1.0"
twine = "^6.1.0"
wheel = "^0.38.4"

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
sphinx = "^7.2.6"
sphinx-markdown-builder = "0.6.6"
msal = "^1.32.3"
azure-devops = "7.1.0b4"

[[tool.poetry.source]]
name = "PyPI"
priority = "primary"



[tool.mypy]
python_version = "3.11"
exclude = [".mypy_cache", ".tox", ".venv", "lib", "notebooks", "tests"]
ignore_missing_imports = true
disallow_any_decorated = true
disallow_any_generics = true
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
warn_unused_ignores = true
warn_no_return = true
warn_return_any = true
warn_redundant_casts = true
strict_equality = true
warn_unused_configs = true

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "lib",
    "notebooks",
    "tests",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.11 (>=)
target-version = "py311"

# Allow fix for all enabled rules
fix = true

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = ["E4", "E7", "E9", "F"]
ignore = []

# Allow fix for all enabled rules
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
docstring-code-format = true

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-s -p no:warnings"
log_cli = 1
log_cli_level = "INFO"
log_cli_format = "[pytest][%(asctime)s][%(levelname)s][%(module)s][%(funcName)s] %(message)s"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"
log_level = "INFO"
markers =[
    "onlylocal: marks tests as slow (deselect with '-m \"not onlylocal\"')",
    "serial"
]
